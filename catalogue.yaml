   # configure catalogue component

- name: configure catalogue component
  hosts: catalogue # inventory group name
  become: yes # to get root privilages
  tasks:
  # Disable default Node.js module
  - name: disable default nodejs  # here i usede command line because we don't have any module for dnf module disable
    ansible.builtin.command: dnf module disable nodejs -y  
# Enable Node.js 20 module
  - name:  enable nodejs:20
    ansible.builtin.command: dnf module enable nodejs:20 -y
# here i am using dnf module to install nodejs package
  - name: install nodejs
    ansible.builtin.dnf:
      name: nodejs
      state: present
# here i am using user module to create roboshop user (ansisble it self it checks the user no need towrite the logic)
  # - name: create roboshop system user  
  #   ansible.builtin.user: # user module is used to create a user in ansible
  #     name: roboshop
  #     shell: /sbin/nologin  
  #     system: true # by giveing true roboshop will become the system user
  #     home: /app  
  # Create application directory
  - name: create application directory
    ansible.builtin.file:
      path: /app
      state: directory
#Download catalogue code
  - name: download catalogue code... 
    ansible.builtin.get_url:
      url: "https://roboshop-artifacts.s3.amazonaws.com/catalogue-v3.zip"
      dest: /tmp/catalogue.zip
# Extract catalogue code
#  this module thinks file exist on ansible control server, needs to extract on to remote machine
#  remote_src: yes  --> this is used when the file is already present on the remote machine, already exist in catalogue server
  - name: extract catalogue code...
    ansible.builtin.unarchive:
      src: /tmp/catalogue.zip
      dest: /app
      remote_src: yes # this is used when the file is already present on the remote machine, already exist in catalogue server

  - name: install dependencies
    community.general.npm: # npm module is not present in ansible by default we need to install it using "ansible-galaxy collection install community.general"
       path: /app # path where package.json is present

  - name: copy catalogue service to system directory # here i am using copy module to copy the catalogue.service file from ansible control node to ansible managed node
    ansible.builtin.copy:
      src: catalogue.service # here i am copying the catalogue.service file from ansible control node
      dest: /etc/systemd/system/catalogue.service # here i am copying the catalogue.service file from ansible control node to ansible managed node

  - name: systemctl daemon-reload # here i am using command module to run the command systemctl daemon-reload
    ansible.builtin.systemd_service:
       daemon_reload: true

  - name: start and enable catalogue service # here i am using service module to start and enable the catalogue service
    ansible.builtin.service:
      name: catalogue
      state: started
      enabled: yes

  - name: copy mongodb repo
    ansible.builtin.copy:
      src: mongo.repo
      dest: /etc/yum.repos.d/mongo.repo

  - name: install mongodb client
    ansible.builtin.dnf:
      name: mongodb-mongosh
      state: present

  - name: check products loaded or not
    ansible.builtin.command: mongosh --host  54.226.109.186 --eval 'db.getMongo().getDBNames().indexOf("catalogue")' # to check the catalogue database is present or not
    register: catalogue_output # command is used for to see the output of the command

  - name: print catalogue output
    ansible.builtin.debug:
      msg: "{{ catalogue_output }}"

  - name: load products
    ansible.builtin.shell: mongosh --host 54.226.109.186 < /app/db/master-data.js # here i used shell module because it supports redirection operators like <, >, >>, | etc
    when: catalogue_output.stdout | int < 0 # when the output is less than 0 then only load the products data
